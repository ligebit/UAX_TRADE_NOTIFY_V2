const request = require('request');
const Web3 = require('web3');
const BigNumber = require('bignumber.js');
const TEN_BIG_NUMBER = new BigNumber(10);

class BOT {

    constructor() {
        this.config = require('../config/config.json');

        this.web3http = new Web3(this.config.HttpProvider);

        this.provider = new Web3.providers.WebsocketProvider(this.config.WebsocketProvider);

        this.web3wss = new Web3(this.provider);

        this.subscribeAllEvents();


        //–ï—Å–ª–∏ —Å–æ–µ–¥–µ–Ω–µ–Ω–∏–µ —Å –≤–µ–±—Å–æ–∫–µ—Ç–∞–º–∏ –∑–∞–∫—Ä—ã—Ç–æ
        this.provider.on('end', e => {
            console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WS –∑–∞–∫—Ä—ã—Ç–æ');
            console.log('–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WS...');
            
            this.web3wss = new Web3(provider);
        
            //–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –∏–≤–µ–Ω—Ç—ã
            this.subscribeAllEvents();
        
            this.provider.on('connect', function() {
                console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WS —É—Å–ø–µ—à–Ω–æ!');
            });
        });

    }

    subscribeEvent(contract, eventName, callback) {
        let eventJsonInterface = this.web3http.utils._.find(
            contract._jsonInterface,
            o => o.name === eventName && o.type === 'event',
        )
    
        let subscription = this.web3wss.eth.subscribe('logs', {
            address: contract.options.address,
            topics: [eventJsonInterface.signature]
        }, (error, result) => {
            if (!error) {
                let eventObj = this.web3http.eth.abi.decodeLog(
                    eventJsonInterface.inputs,
                    result.data,
                    result.topics.slice(1)
                )
                console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–≤–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω ' + Date(Date.now()));
                callback(eventObj, result.transactionHash);
            } else {
                console.log('–û—à–∏–±–∫–∞ subscribeEvent ' + error);
            }
        })
    }

    calculatePrice(numeratorAmount, numeratorDecimals, denominatorAmount, denominatorDecimals) {
        // convert to BigNumber
        const numerator = new BigNumber(numeratorAmount.toString())
        const denominator = new BigNumber(denominatorAmount.toString())
      
        if (numeratorDecimals >= denominatorDecimals) {
            const precisionFactor = TEN_BIG_NUMBER.exponentiatedBy(numeratorDecimals - denominatorDecimals)
            return numerator.dividedBy(denominator.multipliedBy(precisionFactor))
        } else {
            const precisionFactor = TEN_BIG_NUMBER.exponentiatedBy(denominatorDecimals - numeratorDecimals)
            return numerator.multipliedBy(precisionFactor).dividedBy(denominator)
        }
    }

    Deposit(contract, eventObj, transactionHash) {
        if(this.config.whitelistTokens.includes(eventObj.token)) {
            this.sendMessageTelegramBot(this.config.telegram.username, `
‚ûï–î–µ–ø–æ–∑–∏—Ç <code>${eventObj.amount/100}</code> UAX
    
<a href = "https://etherscan.io/address/${eventObj.user}">üíº${eventObj.user.substring(0, 5)}...${eventObj.user.substring(37, 42)}</a>
<a href = "https://etherscan.io/tx/${transactionHash}">üè∑Ô∏è–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</a>`);
        
        }
    }

    async Trade(contract, eventObj, transactionHash) {

        //–ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ id
        let buyToken = await contract.methods.tokenIdToAddressMap(eventObj.buyToken).call();
        let sellToken = await contract.methods.tokenIdToAddressMap(eventObj.sellToken).call();

        //–ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å –≤–∞–π—Ç–ª–∏—Å—Ç –º–∞—Å—Å–∏–≤–µ
        if(this.config.whitelistTokens.includes(buyToken) || this.config.whitelistTokens.includes(sellToken)) {
    
            //–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± buyToken —Ç–æ–∫–µ–Ω–µ(—Ç–∏–∫–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏ —Ç.–¥.)
            request("https://api.ethplorer.io/getTokenInfo/" + buyToken + "?apiKey=freekey", (error, response, buyTokenInfo) => {
                buyTokenInfo = JSON.parse(buyTokenInfo);
        
                //–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± sellToken —Ç–æ–∫–µ–Ω–µ(—Ç–∏–∫–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏ —Ç.–¥.)
                request("https://api.ethplorer.io/getTokenInfo/" + sellToken + "?apiKey=freekey", (error, response, sellTokenInfo) => {
                    sellTokenInfo = JSON.parse(sellTokenInfo);
        
                    //–ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
                    let priceBuy = this.calculatePrice(eventObj.executedBuyAmount, buyTokenInfo.decimals, eventObj.executedSellAmount, sellTokenInfo.decimals).toString();
                    let priceSell = this.calculatePrice(eventObj.executedSellAmount, sellTokenInfo.decimals, eventObj.executedBuyAmount, buyTokenInfo.decimals).toString();

                    //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç
                    this.sendMessageTelegramBot(this.config.telegram.username, `
    ‚úÖ–£—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω

    <code>${eventObj.executedSellAmount/(Math.pow(10, Number(sellTokenInfo.decimals)))}</code> ${sellTokenInfo.symbol} ‚Üí <code>${eventObj.executedBuyAmount/(Math.pow(10, Number(buyTokenInfo.decimals)))}</code> ${buyTokenInfo.symbol}

    <a href = "https://etherscan.io/address/${eventObj.owner}">üíº${eventObj.owner.substring(0, 5)}...${eventObj.owner.substring(37, 42)}</a>
    <a href = "https://etherscan.io/tx/${transactionHash}">üè∑Ô∏è–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</a>`);
            
        
                });
            });
        }
    }

    Withdraw(contract, eventObj, transactionHash) {

        if(this.config.whitelistTokens.includes(eventObj.token)) {
    
            this.sendMessageTelegramBot(this.config.telegram.username, `
‚ûñ–í—ã–≤–æ–¥ <code>${eventObj.amount/100}</code> UAX
    
<a href = "https://etherscan.io/address/${eventObj.user}">üíº${eventObj.user.substring(0, 5)}...${eventObj.user.substring(37, 42)}</a>
<a href = "https://etherscan.io/tx/${transactionHash}">üè∑Ô∏è–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</a>
    `);
        }
    }

    WithdrawRequest(contract, eventObj, transactionHash) {

        if(this.config.whitelistTokens.includes(eventObj.token)) {
    
            this.sendMessageTelegramBot(this.config.telegram.username, `
üïì–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ <code>${eventObj.amount/100}</code> UAX
    
<a href = "https://etherscan.io/address/${eventObj.user}">üíº${eventObj.user.substring(0, 5)}...${eventObj.user.substring(37, 42)}</a>
<a href = "https://etherscan.io/tx/${transactionHash}">üè∑Ô∏è–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</a>
    `);
        }
    
    }

    async OrderPlacement(contract, eventObj, transactionHash) {

        let buyToken = await contract.methods.tokenIdToAddressMap(eventObj.buyToken).call();
        let sellToken = await contract.methods.tokenIdToAddressMap(eventObj.sellToken).call();

        if(this.config.whitelistTokens.includes(buyToken) || this.config.whitelistTokens.includes(sellToken)) {

            request("https://api.ethplorer.io/getTokenInfo/" + buyToken + "?apiKey=freekey", (error, response, buyTokenInfo) => {
                buyTokenInfo = JSON.parse(buyTokenInfo);

                request("https://api.ethplorer.io/getTokenInfo/" + sellToken + "?apiKey=freekey", (error, response, sellTokenInfo) => {
                    sellTokenInfo = JSON.parse(sellTokenInfo);

                        let priceBuy = this.calculatePrice(eventObj.priceNumerator, buyTokenInfo.decimals, eventObj.priceDenominator, sellTokenInfo.decimals).toString();
                        let priceSell = this.calculatePrice(eventObj.priceDenominator, sellTokenInfo.decimals, eventObj.priceNumerator, buyTokenInfo.decimals).toString();

                        this.sendMessageTelegramBot(this.config.telegram.username, `
    üìÉ–ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä

    <code>${eventObj.priceDenominator/(Math.pow(10, Number(sellTokenInfo.decimals)))}</code> ${sellTokenInfo.symbol} ‚Üí <code>${eventObj.priceNumerator/(Math.pow(10, Number(buyTokenInfo.decimals)))}</code> ${buyTokenInfo.symbol}

    1 ${sellTokenInfo.symbol} = <code>${priceBuy}</code> ${buyTokenInfo.symbol}
    1 ${buyTokenInfo.symbol} = <code>${priceSell}</code> ${sellTokenInfo.symbol}

    <a href = "https://etherscan.io/address/${eventObj.owner}">üíº${eventObj.owner.substring(0, 5)}...${eventObj.owner.substring(37, 42)}</a>
    <a href = "https://etherscan.io/tx/${transactionHash}">üè∑Ô∏è–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</a>`);
            
        
                });
            }); 
        }  
    }

    sendMessageTelegramBot = (id, text) => {
        request.post({
            url: this.config.telegram.api + this.config.telegram.token + '/sendMessage',
            form: {
                chat_id: id,
                text: text,
                parse_mode: 'HTML',
                disable_web_page_preview: true
            }
        });
    }


    subscribeAllEvents() {
        request(this.config.apiUrlEtherscanGetAbi + this.config.contractAddressMesa, (error, response, contractInterface) => {

            contractInterface = JSON.parse(contractInterface);
            contractInterface = JSON.parse(contractInterface.result);
    
            let contract = new this.web3wss.eth.Contract(contractInterface, this.config.contractAddressMesa);
            
            //–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –∏–≤–µ–Ω—Ç—ã
            this.subscribeEvent(contract, 'OrderPlacement', (eventObj, transactionHash)=> {
    
                this.OrderPlacement(contract, eventObj, transactionHash);
                
            });
    
            this.subscribeEvent(contract, 'Withdraw', (eventObj, transactionHash) => {
    
                this.Withdraw(contract, eventObj, transactionHash);
                
            });
    
            this.subscribeEvent(contract, 'Deposit', (eventObj, transactionHash) => {
    
                this.Deposit(contract, eventObj, transactionHash);
                
            });
    
            this.subscribeEvent(contract, 'WithdrawRequest', (eventObj, transactionHash) => {
    
                this.WithdrawRequest(contract, eventObj, transactionHash);
                
            });
    
            this.subscribeEvent(contract, 'Trade', (eventObj, transactionHash) => {
    
                this.Trade(contract, eventObj, transactionHash);
                
            });
        });
    }

}

module.exports = {
    BOT
}